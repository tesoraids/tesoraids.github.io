[
  {
    "id": "dsa",
    "type": 3,
    "group": 4,
    "date": "2024-04-23",
    "yt": "aaZPN897TX4",
    "name": [
      {
        "lang": "es",
        "text": "Dragonstar Arena"
      },
      {
        "lang": "en",
        "text": "Dragonstar Arena"
      }
    ],
    "texts": [
      {
        "range": {
          "start": 2,
          "end": 6
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Esta arena consta de X escenarios con 4 rondas de oleadas de monstruos, y una quinta con un jefe final. Tras ellos llega un escenario final con una única ronda con todos los jefes de las X anteriores."
          },
          {
            "lang": "en",
            "text": "This arena consists of X scenarios with 4 rounds of monster waves, and a fifth with a final boss. After them comes a final scenario with a single round with all the bosses from the previous Xs."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Intro 1"
          },
          {
            "lang": "en",
            "text": "Intro 1"
          }
        ]
      },
      {
        "range": {
          "start": 14,
          "end": 20
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Cada escenario tiene 5 pebeteros para indicar la ronda en la que se encuentra. Además en cada escenario suele haber una mecánica única que se va repitiendo."
          },
          {
            "lang": "en",
            "text": "Each stage has 5 cauldrons to indicate the round it is in. Furthermore, in each scenario there is usually a unique mechanic that is repeated."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Intro 2"
          },
          {
            "lang": "en",
            "text": "Intro 2"
          }
        ]
      },
      {
        "range": {
          "start": 30,
          "end": 35
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 1, Ronda 1."
          },
          {
            "lang": "en",
            "text": "Scenario 1, Round 1."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E1.R1"
          },
          {
            "lang": "en",
            "text": "E1.R1"
          }
        ]
      },
      {
        "range": {
          "start": 83,
          "end": 88
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 1, Ronda 2."
          },
          {
            "lang": "en",
            "text": "Scenario 1, Round 2."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E1.R2"
          },
          {
            "lang": "en",
            "text": "E1.R2"
          }
        ]
      },
      {
        "range": {
          "start": 115,
          "end": 135
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 1: Los enemigos con un banderín a la espalda dejarán un área en el suelo, la cual curará a toda unidad enemiga que esté sobre ella. Además, hay trampillas de lanzas que se activan y habrá que evitar estar encima de ellas."
          },
          {
            "lang": "en",
            "text": "Mechanics scenario 1: Enemies with a flag on their back will leave an area on the ground, which will heal any enemy unit that is on it. In addition, there are spear trapdoors that activate and you will have to avoid being on top of them."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M1"
          },
          {
            "lang": "en",
            "text": "M1"
          }
        ]
      },
      {
        "range": {
          "start": 117,
          "end": 122
        },
        "roles": [ 1 ],
        "text": [
          {
            "lang": "es",
            "text": "El tanque debe sacar a los enemigos del área del suelo"
          },
          {
            "lang": "en",
            "text": "The tank must remove enemies from the ground area"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Tank"
          },
          {
            "lang": "en",
            "text": "Tank"
          }
        ]
      },
      {
        "range": {
          "start": 143,
          "end": 148
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 1, Ronda 3."
          },
          {
            "lang": "en",
            "text": "Scenario 1, Round 3."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E1.R3"
          },
          {
            "lang": "en",
            "text": "E1.R3"
          }
        ]
      },
      {
        "range": {
          "start": 190,
          "end": 195
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 1, Ronda 4."
          },
          {
            "lang": "en",
            "text": "Scenario 1, Round 4."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E1.R4"
          },
          {
            "lang": "en",
            "text": "E1.R4"
          }
        ]
      },
      {
        "range": {
          "start": 245,
          "end": 250
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 1, Ronda 5. Jefe."
          },
          {
            "lang": "en",
            "text": "Scenario 1, Round 5. Boss."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E1.R5"
          },
          {
            "lang": "en",
            "text": "E1.R5"
          }
        ]
      },
      {
        "range": {
          "start": 333,
          "end": 340
        },
        "roles": [ 1 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 1: Sacar al Jefe del área de curación."
          },
          {
            "lang": "en",
            "text": "Scenario 1 mechanic: Take the Boss out of the healing area."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M1"
          },
          {
            "lang": "en",
            "text": "M1"
          }
        ]
      },
      {
        "range": {
          "start": 379,
          "end": 405
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 2: Existen 3 hogueras que tendremos que tener cerca para no morir congelados. Cada cierto tiempo las hogueras se apagarán y habrá que volver a encenderlas con las antorchas que hay distribuidas por la zona."
          },
          {
            "lang": "en",
            "text": "Scenario 2 mechanics: There are 3 bonfires that we will have to keep close to avoid freezing to death. From time to time the bonfires will go out and will have to be lit again with the torches that are distributed around the area."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M2"
          },
          {
            "lang": "en",
            "text": "M2"
          }
        ]
      },
      {
        "range": {
          "start": 410,
          "end": 415
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 2, Ronda 1."
          },
          {
            "lang": "en",
            "text": "Scenario 2, Round 1."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E2.R1"
          },
          {
            "lang": "en",
            "text": "E2.R1"
          }
        ]
      },
      {
        "range": {
          "start": 465,
          "end": 470
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 2, Ronda 2."
          },
          {
            "lang": "en",
            "text": "Scenario 2, Round 2."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E2.R2"
          },
          {
            "lang": "en",
            "text": "E2.R2"
          }
        ]
      },
      {
        "range": {
          "start": 533,
          "end": 553
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 2: La hoguera se ha apagado. Cogemos una antorcha y la encendemos de nuevo."
          },
          {
            "lang": "en",
            "text": "Scenario 2 mechanics: The bonfire has gone out. We take a torch and light it again."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M2"
          },
          {
            "lang": "en",
            "text": "M2"
          }
        ]
      },
      {
        "range": {
          "start": 535,
          "end": 540
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 2, Ronda 3."
          },
          {
            "lang": "en",
            "text": "Scenario 2, Round 3."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E2.R3"
          },
          {
            "lang": "en",
            "text": "E2.R3"
          }
        ]
      },
      {
        "range": {
          "start": 594,
          "end": 599
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 2, Ronda 4."
          },
          {
            "lang": "en",
            "text": "Scenario 2, Round 4."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E2.R4"
          },
          {
            "lang": "en",
            "text": "E2.R4"
          }
        ]
      },
      {
        "range": {
          "start": 607,
          "end": 620
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 2: La hoguera se ha apagado. Cogemos una antorcha y la encendemos de nuevo."
          },
          {
            "lang": "en",
            "text": "Scenario 2 mechanics: The bonfire has gone out. We take a torch and light it again."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M2"
          },
          {
            "lang": "en",
            "text": "M2"
          }
        ]
      },
      {
        "range": {
          "start": 670,
          "end": 675
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 2, Ronda 5. Jefe."
          },
          {
            "lang": "en",
            "text": "Scenario 2, Round 5. Boss."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E2.R5"
          },
          {
            "lang": "en",
            "text": "E2.R5"
          }
        ]
      },
      {
        "range": {
          "start": 803,
          "end": 823
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 3: Aparecen aleatoriamente áreas grandes de veneno a evitar."
          },
          {
            "lang": "en",
            "text": "Scenario 3 mechanics: Large areas of poison to avoid appear randomly."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M3"
          },
          {
            "lang": "en",
            "text": "M3"
          }
        ]
      },
      {
        "range": {
          "start": 847,
          "end": 852
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 3, Ronda 1."
          },
          {
            "lang": "en",
            "text": "Scenario 3, Round 1."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E3.R1"
          },
          {
            "lang": "en",
            "text": "E3.R1"
          }
        ]
      },
      {
        "range": {
          "start": 908,
          "end": 913
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 3, Ronda 2."
          },
          {
            "lang": "en",
            "text": "Scenario 3, Round 2."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E3.R2"
          },
          {
            "lang": "en",
            "text": "E3.R2"
          }
        ]
      },
      {
        "range": {
          "start": 971,
          "end": 976
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 3, Ronda 3."
          },
          {
            "lang": "en",
            "text": "Scenario 3, Round 3."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E3.R3"
          },
          {
            "lang": "en",
            "text": "E3.R3"
          }
        ]
      },
      {
        "range": {
          "start": 1044,
          "end": 1049
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 3, Ronda 4."
          },
          {
            "lang": "en",
            "text": "Scenario 3, Round 4."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E3.R4"
          },
          {
            "lang": "en",
            "text": "E3.R4"
          }
        ]
      },
      {
        "range": {
          "start": 1100,
          "end": 1105
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 3, Ronda 5. Jefe."
          },
          {
            "lang": "en",
            "text": "Scenario 3, Round 5. Boss."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E3.R5"
          },
          {
            "lang": "en",
            "text": "E3.R5"
          }
        ]
      },
      {
        "range": {
          "start": 1246,
          "end": 1261
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 4: Aparecen unos guerreros con un banderín a la espalda que se quedan quietos apuntando a uno del equipo, donde aparecerá una copia suya. El área que crea la copia ha de ser evitada y matar al original para que no sigua haciendo otras copias."
          },
          {
            "lang": "en",
            "text": "Scenario 4 mechanics: Some warriors appear with a pennant on their backs and stand still, pointing at one of the team, where a copy of them will appear. The area that creates the copy must be avoided and the original must be killed so that it does not continue making other copies."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M4"
          },
          {
            "lang": "en",
            "text": "M4"
          }
        ]
      },
      {
        "range": {
          "start": 1270,
          "end": 1275
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 4, Ronda 1."
          },
          {
            "lang": "en",
            "text": "Scenario 4, Round 1."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E4.R1"
          },
          {
            "lang": "en",
            "text": "E4.R1"
          }
        ]
      },
      {
        "range": {
          "start": 1325,
          "end": 1330
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 4, Ronda 2."
          },
          {
            "lang": "en",
            "text": "Scenario 4, Round 2."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E4.R2"
          },
          {
            "lang": "en",
            "text": "E4.R2"
          }
        ]
      },
      {
        "range": {
          "start": 1395,
          "end": 1400
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 4, Ronda 3."
          },
          {
            "lang": "en",
            "text": "Scenario 4, Round 3."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E4.R3"
          },
          {
            "lang": "en",
            "text": "E4.R3"
          }
        ]
      },
      {
        "range": {
          "start": 1460,
          "end": 1465
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 4, Ronda 4."
          },
          {
            "lang": "en",
            "text": "Scenario 4, Round 4."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E4.R4"
          },
          {
            "lang": "en",
            "text": "E4.R4"
          }
        ]
      },
      {
        "range": {
          "start": 1497,
          "end": 1506
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 4: 2 guerreros con banderines apuntan a 2 del grupo para crear una copia."
          },
          {
            "lang": "en",
            "text": "Scenario 4 mechanics: 2 warriors with flags target 2 of the group to create a copy."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M4"
          },
          {
            "lang": "en",
            "text": "M4"
          }
        ]
      },
      {
        "range": {
          "start": 1545,
          "end": 1550
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 4, Ronda 5. Jefe."
          },
          {
            "lang": "en",
            "text": "Scenario 4, Round 5. Boss."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E4.R5"
          },
          {
            "lang": "en",
            "text": "E4.R5"
          }
        ]
      },
      {
        "range": {
          "start": 1680,
          "end": 1694
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 5: En la arena existen plataformas, tanto en el suelo como en la pared. Un mago invocará una maldición que marcará a varios del grupo y deberán evitar la muerte poniéndose al lado o encima de una plataforma iluminada."
          },
          {
            "lang": "en",
            "text": "Mechanics scenario 5: In the arena there are platforms, both on the floor and on the wall. A magician will invoke a curse that will mark several of the group and they must avoid death by standing next to or on top of an illuminated platform."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M5"
          },
          {
            "lang": "en",
            "text": "M5"
          }
        ]
      },
      {
        "range": {
          "start": 1706,
          "end": 1711
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 5, Ronda 1."
          },
          {
            "lang": "en",
            "text": "Scenario 5, Round 1."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E5.R1"
          },
          {
            "lang": "en",
            "text": "E5.R1"
          }
        ]
      },
      {
        "range": {
          "start": 1770,
          "end": 1775
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 5, Ronda 2."
          },
          {
            "lang": "en",
            "text": "Scenario 5, Round 2."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E5.R2"
          },
          {
            "lang": "en",
            "text": "E5.R2"
          }
        ]
      },
      {
        "range": {
          "start": 1825,
          "end": 1830
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 5, Ronda 3."
          },
          {
            "lang": "en",
            "text": "Scenario 5, Round 3."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E5.R3"
          },
          {
            "lang": "en",
            "text": "E5.R3"
          }
        ]
      },
      {
        "range": {
          "start": 1845,
          "end": 1853
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mago al fondo inicia la mecánica"
          },
          {
            "lang": "en",
            "text": "Magician in the background starts the mechanics"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M5"
          },
          {
            "lang": "en",
            "text": "M5"
          }
        ]
      },
      {
        "range": {
          "start": 1853,
          "end": 1865
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Los que han sido malditos con área en el suelo tienen que ir a las plataformas iluminadas y mantenerse hasta que desaparezca"
          },
          {
            "lang": "en",
            "text": "Those who have been cursed with ground area have to go to the illuminated platforms and stay until it disappears"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M5"
          },
          {
            "lang": "en",
            "text": "M5"
          }
        ]
      },
      {
        "range": {
          "start": 1929,
          "end": 1934
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 5, Ronda 4."
          },
          {
            "lang": "en",
            "text": "Scenario 5, Round 4."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E5.R4"
          },
          {
            "lang": "en",
            "text": "E5.R4"
          }
        ]
      },
      {
        "range": {
          "start": 2026,
          "end": 2031
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 5, Ronda 5. Jefe."
          },
          {
            "lang": "en",
            "text": "Scenario 5, Round 5. Boss."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E5.R5"
          },
          {
            "lang": "en",
            "text": "E5.R5"
          }
        ]
      },
      {
        "range": {
          "start": 2187,
          "end": 2217
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 6: Algunos enemigos dejarán en el suelo un área al morir, el cual te dará recursos (estamina y magia) a cambio de quitarte vida, hasta la muerte, si permaneces encima"
          },
          {
            "lang": "en",
            "text": "Mechanics scenario 6: Some enemies will leave an area on the ground when they die, which will give you resources (stamina and magic) in exchange for taking life from you, until death, if you remain on top"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M6"
          },
          {
            "lang": "en",
            "text": "M6"
          }
        ]
      },
      {
        "range": {
          "start": 2222,
          "end": 2227
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 6, Ronda 1."
          },
          {
            "lang": "en",
            "text": "Scenario 6, Round 1."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E6.R1"
          },
          {
            "lang": "en",
            "text": "E6.R1"
          }
        ]
      },
      {
        "range": {
          "start": 2285,
          "end": 2290
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 6, Ronda 2."
          },
          {
            "lang": "en",
            "text": "Scenario 6, Round 2."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E6.R2"
          },
          {
            "lang": "en",
            "text": "E6.R2"
          }
        ]
      },
      {
        "range": {
          "start": 2317,
          "end": 2322
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 6: Área de la mecánica"
          },
          {
            "lang": "en",
            "text": "Mechanics scenario 6: Mechanics area"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M6"
          },
          {
            "lang": "en",
            "text": "M6"
          }
        ]
      },
      {
        "range": {
          "start": 2356,
          "end": 2361
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 6, Ronda 3."
          },
          {
            "lang": "en",
            "text": "Scenario 6, Round 3."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E6.R3"
          },
          {
            "lang": "en",
            "text": "E6.R3"
          }
        ]
      },
      {
        "range": {
          "start": 2426,
          "end": 2431
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 6, Ronda 4."
          },
          {
            "lang": "en",
            "text": "Scenario 6, Round 4."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E6.R4"
          },
          {
            "lang": "en",
            "text": "E6.R4"
          }
        ]
      },
      {
        "range": {
          "start": 2491,
          "end": 2496
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 6, Ronda 5. Jefe."
          },
          {
            "lang": "en",
            "text": "Scenario 6, Round 5. Boss."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E6.R5"
          },
          {
            "lang": "en",
            "text": "E6.R5"
          }
        ]
      },
      {
        "range": {
          "start": 2626,
          "end": 2656
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 7: En el escenario aparecen 3 altares, a los cuales irán muertos vivientes lentamente desde cualquiera de los 3 lados. Si llegan al altar, se trasformarán en  un monstruo más fuerte. Hay que evitar que lleguen matándolos."
          },
          {
            "lang": "en",
            "text": "Scenario 7 mechanics: 3 altars appear on the stage, to which undead will slowly go from any of the 3 sides. If they reach the altar, they will transform into a stronger monster. We must prevent them from arriving by killing them."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M7"
          },
          {
            "lang": "en",
            "text": "M7"
          }
        ]
      },
      {
        "range": {
          "start": 2660,
          "end": 2665
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 7, Ronda 1."
          },
          {
            "lang": "en",
            "text": "Scenario 7, Round 1."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E7.R1"
          },
          {
            "lang": "en",
            "text": "E7.R1"
          }
        ]
      },
      {
        "range": {
          "start": 2722,
          "end": 2727
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 7, Ronda 2."
          },
          {
            "lang": "en",
            "text": "Scenario 7, Round 2."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E7.R2"
          },
          {
            "lang": "en",
            "text": "E7.R2"
          }
        ]
      },
      {
        "range": {
          "start": 2738,
          "end": 2743
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 7: Muerto viviente camino del altar."
          },
          {
            "lang": "en",
            "text": "Scenario 7 mechanics: Living dead on the way to the altar."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M7"
          },
          {
            "lang": "en",
            "text": "M7"
          }
        ]
      },
      {
        "range": {
          "start": 2810,
          "end": 2815
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 7, Ronda 3."
          },
          {
            "lang": "en",
            "text": "Scenario 7, Round 3."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E7.R3"
          },
          {
            "lang": "en",
            "text": "E7.R3"
          }
        ]
      },
      {
        "range": {
          "start": 2880,
          "end": 2885
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 7, Ronda 4."
          },
          {
            "lang": "en",
            "text": "Scenario 7, Round 4."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E7.R4"
          },
          {
            "lang": "en",
            "text": "E7.R4"
          }
        ]
      },
      {
        "range": {
          "start": 2970,
          "end": 2975
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 7, Ronda 5. Jefe."
          },
          {
            "lang": "en",
            "text": "Scenario 7, Round 5. Boss."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E7.R5"
          },
          {
            "lang": "en",
            "text": "E7.R5"
          }
        ]
      },
      {
        "range": {
          "start": 3160,
          "end": 3190
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 8: En ocasiones aparecerán 2 centuriones, uno con la marca de fuego y otro con la de hielo. Esta marca se la pondrán a 2 jugadores diferentes y deberán juntarse para no morir de frio uno, y de calor el otro."
          },
          {
            "lang": "en",
            "text": "Scenario 8 mechanics: Sometimes 2 centurions will appear, one with the mark of fire and the other with the mark of ice. This mark will be given to 2 different players and they will have to join together so as not to die from the cold, and the other from the heat."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M8"
          },
          {
            "lang": "en",
            "text": "M8"
          }
        ]
      },
      {
        "range": {
          "start": 3200,
          "end": 3205
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 8, Ronda 1."
          },
          {
            "lang": "en",
            "text": "Scenario 8, Round 1."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E8.R1"
          },
          {
            "lang": "en",
            "text": "E8.R1"
          }
        ]
      },
      {
        "range": {
          "start": 3260,
          "end": 3265
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 8, Ronda 2."
          },
          {
            "lang": "en",
            "text": "Scenario 8, Round 2."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E8.R2"
          },
          {
            "lang": "en",
            "text": "E8.R2"
          }
        ]
      },
      {
        "range": {
          "start": 3325,
          "end": 3330
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 8, Ronda 3."
          },
          {
            "lang": "en",
            "text": "Scenario 8, Round 3."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E8.R3"
          },
          {
            "lang": "en",
            "text": "E8.R3"
          }
        ]
      },
      {
        "range": {
          "start": 3381,
          "end": 3386
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 8: Momento de la mecánica."
          },
          {
            "lang": "en",
            "text": "Mechanics scenario 8: Moment of mechanics."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M8"
          },
          {
            "lang": "en",
            "text": "M8"
          }
        ]
      },
      {
        "range": {
          "start": 3415,
          "end": 3420
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 8, Ronda 4."
          },
          {
            "lang": "en",
            "text": "Scenario 8, Round 4."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E8.R4"
          },
          {
            "lang": "en",
            "text": "E8.R4"
          }
        ]
      },
      {
        "range": {
          "start": 3500,
          "end": 3505
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 8, Ronda 5. Jefe."
          },
          {
            "lang": "en",
            "text": "Scenario 8, Round 5. Boss."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E8.R5"
          },
          {
            "lang": "en",
            "text": "E8.R5"
          }
        ]
      },
      {
        "range": {
          "start": 3650,
          "end": 3680
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 9: En el escenario parecerán portales en el suelo con esqueletos. En el momento que aparezca un monstruo llamado Rubyn Jonnicent, los enemigos será inmunes y habrá que entrar a los portales y matar al otro lado a los enemigos. Cuando mueran, volverán a ser vulnerables."
          },
          {
            "lang": "en",
            "text": "Scenario 9 mechanics: On the stage there will appear to be portals in the ground with skeletons. The moment a monster called Rubyn Jonnicent appears, the enemies will be immune and you will have to enter the portals and kill the enemies on the other side. When they die, they will be vulnerable again."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M9"
          },
          {
            "lang": "en",
            "text": "M9"
          }
        ]
      },
      {
        "range": {
          "start": 3680,
          "end": 3685
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 9, Ronda 1."
          },
          {
            "lang": "en",
            "text": "Scenario 9, Round 1."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E9.R1"
          },
          {
            "lang": "en",
            "text": "E9.R1"
          }
        ]
      },
      {
        "range": {
          "start": 3750,
          "end": 3755
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 9, Ronda 2."
          },
          {
            "lang": "en",
            "text": "Scenario 9, Round 2."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E9.R2"
          },
          {
            "lang": "en",
            "text": "E9.R2"
          }
        ]
      },
      {
        "range": {
          "start": 3797,
          "end": 3802
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 9, Ronda 3."
          },
          {
            "lang": "en",
            "text": "Scenario 9, Round 3."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E9.R3"
          },
          {
            "lang": "en",
            "text": "E9.R3"
          }
        ]
      },
      {
        "range": {
          "start": 3907,
          "end": 3940
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 9: Aparece Jonnicent, momento de entrar al portal."
          },
          {
            "lang": "en",
            "text": "Scenario 9 mechanics: Jonnicent appears, time to enter the portal."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M9"
          },
          {
            "lang": "en",
            "text": "M9"
          }
        ]
      },
      {
        "range": {
          "start": 3856,
          "end": 3861
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 9, Ronda 4."
          },
          {
            "lang": "en",
            "text": "Scenario 9, Round 4."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E9.R4"
          },
          {
            "lang": "en",
            "text": "E9.R4"
          }
        ]
      },
      {
        "range": {
          "start": 4047,
          "end": 4052
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Escenario 9, Ronda 5. Jefe."
          },
          {
            "lang": "en",
            "text": "Scenario 9, Round 5. Boss."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "E9.R5"
          },
          {
            "lang": "en",
            "text": "E9.R5"
          }
        ]
      },
      {
        "range": {
          "start": 4340,
          "end": 4370
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 10: En el escenario estará el jefe final. A partir de cierto momento irán apareciendo todos los jefes de las rondas anteriores."
          },
          {
            "lang": "en",
            "text": "Scenario 10 mechanics: The final boss will be on the stage. From a certain moment onwards, all the bosses from the previous rounds will appear."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M10"
          },
          {
            "lang": "en",
            "text": "M10"
          }
        ]
      },
      {
        "range": {
          "start": 4446,
          "end": 4456
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 10: Aparecen los jefes anteriores. Debemos separar los jefes anteriores del jefe principal y matar a este último ignorando los demás."
          },
          {
            "lang": "en",
            "text": "Mechanics scenario 10: The previous bosses appear. We must separate the previous bosses from the main boss and kill the latter while ignoring the others."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M10"
          },
          {
            "lang": "en",
            "text": "M10"
          }
        ]
      },
      {
        "range": {
          "start": 4474,
          "end": 4484
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica escenario 10: El jefe final cargará un ataque en área que nos quitará casi toda la vida. Conviene estar con la vida a tope o echar escudo para resistirlo."
          },
          {
            "lang": "en",
            "text": "Mechanics scenario 10: The final boss will charge an area attack that will take away almost all of our life. It is advisable to live your life to the fullest or take a shield to resist it."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "M10"
          },
          {
            "lang": "en",
            "text": "M10"
          }
        ]
      },
      {
        "range": {
          "start": 4556,
          "end": 4566
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "FIN!"
          },
          {
            "lang": "en",
            "text": "END!"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Final"
          },
          {
            "lang": "en",
            "text": "Final"
          }
        ]
      },
      {
        "range": {
          "start": 4600,
          "end": 4620
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Gracias a @Darth-Galix, @Balaitus y @Maitymaity por su ayuda en la guía."
          },
          {
            "lang": "en",
            "text": "Thanks to @Darth-Galix, @Balaitus and @Maitymaity for their help with the guide."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Final"
          },
          {
            "lang": "en",
            "text": "Final"
          }
        ]
      }
    ],
    "pauses": [
      {
        "roles": [ 1, 2 ],
        "start": 117,
        "duration": 5
      },
      {
        "roles": [ 1, 2, 3 ],
        "start": 2317,
        "duration": 5
      },
      {
        "roles": [ 1, 2, 3 ],
        "start": 2738,
        "duration": 5
      },
      {
        "roles": [ 1, 2, 3 ],
        "start": 4474,
        "duration": 5
      }
    ],
    "timeline": [
      {
        "mode": 0,
        "ranges": [
          {
            "start": 0,
            "toEnd": true
          }
        ]
      }
    ]
  },
  {
    "id": "vh",
    "type": 3,
    "group": 1,
    "date": "2022-05-11",
    "yt": "YEvHtGMha7o",
    "name": [
      {
        "lang": "es",
        "text": "Vateshran Hollows"
      },
      {
        "lang": "en",
        "text": "Vateshran Hollows"
      }
    ],
    "texts": [
      {
        "range": {
          "start": 2,
          "end": 6
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Vateshran Hollows (@xMorgOx)"
          },
          {
            "lang": "en",
            "text": "Vateshran Hollows (@xMorgOx)"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Intro 1"
          },
          {
            "lang": "en",
            "text": "Intro 1"
          }
        ]
      },
      {
        "range": {
          "start": 19,
          "end": 29
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Camino azul"
          },
          {
            "lang": "en",
            "text": "blue road"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Camino azul"
          },
          {
            "lang": "en",
            "text": "blue road"
          }
        ]
      },
      {
        "range": {
          "start": 120,
          "end": 130
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Este jefe va cambiando de posición y canaliza una habilidad que tendremos que ir interrumpiendo. También invoca un golem. Si uno de los 2 muere, el que queda enfurecerá y aumentará su daño."
          },
          {
            "lang": "en",
            "text": "This boss changes position and channels an ability that we will have to interrupt. Also summons a golem. If one of the 2 dies, the remaining one will become enraged and increase its damage."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Jefe"
          },
          {
            "lang": "en",
            "text": "Boss"
          }
        ]
      },
      {
        "range": {
          "start": 205,
          "end": 215
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Tendremos que llegar al final de ciertos caminos manteniendo un aura, la cual aumentaremos su duración mediante sinergias que encontraremos por el camino. Si nos quedamos sin aura antes del final del camino, volveremos al inicio."
          },
          {
            "lang": "en",
            "text": "We will have to reach the end of certain paths maintaining an aura, which we will increase its duration through synergies that we will find along the way. If we run out of aura before the end of the path, we will return to the beginning."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica camino azul"
          },
          {
            "lang": "en",
            "text": "Blue road mechanics"
          }
        ]
      },
      {
        "range": {
          "start": 323,
          "end": 333
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "El jefe va invocando monstruos con forma de ojo en la parte superior del escenario. Cuanto más tiempo pase, más aparecerán y nos atacarán a distancia. Si se acumulan demasiados tendremos que subir a destruirlos."
          },
          {
            "lang": "en",
            "text": "The boss summons eye-shaped monsters at the top of the stage. The more time passes, the more they will appear and attack us from a distance. If too many accumulate we will have to go up to destroy them."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Jefe"
          },
          {
            "lang": "en",
            "text": "Boss"
          }
        ]
      },
      {
        "range": {
          "start": 356,
          "end": 366
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "El jefe también invoca espectros azules que nos irán quitando vida. Cuando el jefe haga un ataque en forma de cono, podemos ponernos en línea con el espectro para que el propio ataque del jefe destruya el espectro."
          },
          {
            "lang": "en",
            "text": "The boss also summons blue specters that will drain us of life. When the boss does a cone attack, we can line up with the specter so that the boss's own attack destroys the specter."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Jefe"
          },
          {
            "lang": "en",
            "text": "Boss"
          }
        ]
      },
      {
        "range": {
          "start": 438,
          "end": 443
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Camino verde"
          },
          {
            "lang": "en",
            "text": "green path"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Camino verde"
          },
          {
            "lang": "en",
            "text": "green path"
          }
        ]
      },
      {
        "range": {
          "start": 548,
          "end": 553
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "El jefe viene a ser un alma que va poseyendo 3 golems. El verdadero está más iluminado y podemos ver una luz cuando viaja de uno a otro. En el exterior habrá unas Spriggan que habrá que interrumpir o nos meterá en una especie de maldición donde no podemos hacer daño a nada hasta que matemos a una Spriggan."
          },
          {
            "lang": "en",
            "text": "The boss is a soul that possesses 3 golems. The real one is more illuminated and we can see a light when it travels from one to the other. Outside there will be some Spriggan that will have to be interrupted or we will be put in a kind of curse where we cannot harm anything until we kill a Spriggan."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Jefe"
          },
          {
            "lang": "en",
            "text": "Boss"
          }
        ]
      },
      {
        "range": {
          "start": 735,
          "end": 740
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "El jefe irá saltando de plataforma en plataforma. Solo le haremos daño si estamos en una plataforma de diferente color al jefe. En cada plataforma hay un espíritu que habrá que interrumpir para evitar que hagan daños canalizados."
          },
          {
            "lang": "en",
            "text": "The boss will jump from platform to platform. We will only hurt him if we are on a platform of a different color than the boss. On each platform there is a spirit that will have to be interrupted to prevent them from doing channel damage."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Jefe"
          },
          {
            "lang": "en",
            "text": "Boss"
          }
        ]
      },
      {
        "range": {
          "start": 965,
          "end": 970
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Camino rojo"
          },
          {
            "lang": "en",
            "text": "red road"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Camino rojo"
          },
          {
            "lang": "en",
            "text": "red road"
          }
        ]
      },
      {
        "range": {
          "start": 1215,
          "end": 1220
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Para pasar sobre la lava, debemos obtener un aura golpeando con ataque pesado los orbes de lava."
          },
          {
            "lang": "en",
            "text": "To pass over the lava, we must obtain an aura by hitting the lava orbs with a heavy attack."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica camino rojo"
          },
          {
            "lang": "en",
            "text": "Red road mechanics"
          }
        ]
      },
      {
        "range": {
          "start": 1335,
          "end": 1340
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Este jefe clavará en el suelo su espada llenando de lava todo el escenario. Cuando lo haga debemos atacar una esfera de lava para obtener inmunidad."
          },
          {
            "lang": "en",
            "text": "This boss will stick his sword into the ground, filling the entire stage with lava. When it does, we must attack a lava sphere to obtain immunity."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Jefe"
          },
          {
            "lang": "en",
            "text": "Boss"
          }
        ]
      },
      {
        "range": {
          "start": 1610,
          "end": 1615
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Aparece Felms. Este jefe estará durante todo el combate, reviviendo cada vez que se le mate. Si pasa demasiado tiempo sin matarle, se pondrá rojizo y hará más daño."
          },
          {
            "lang": "en",
            "text": "Felms appears. This boss will be there throughout the fight, reviving every time he is killed. If you go too long without killing him, he will turn reddish and do more damage."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Camino morado"
          },
          {
            "lang": "en",
            "text": "purple road"
          }
        ]
      },
      {
        "range": {
          "start": 1614,
          "end": 1619
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "El jefe no se puede matar sin antes hacer 3 portales relacionados con los 3 caminos anteriores. Cada portal añade mecánicas que existían en el camino asociado. Además, el jefe cada cierto tiempo invoca espectros unidos entre sí que van del exterior al interior de la plataforma. Debemos matar uno de ellos para que exista un hueco por el que escapar y evitar morir. También existe un arquero que aparece cada cierto tiempo al morir y unos golems encadenados irán despertando. Los golems se regeneran tras cada portal."
          },
          {
            "lang": "en",
            "text": "The boss cannot be killed without first making 3 portals related to the previous 3 paths. Each portal adds mechanics that existed in the associated path. In addition, the boss every so often summons ghosts linked together that go from the outside to the inside of the platform. We must kill one of them so that there is a gap through which to escape and avoid dying. There is also an archer that appears from time to time when you die and some chained golems will wake up. Golems regenerate after each portal."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica camino morado"
          },
          {
            "lang": "en",
            "text": "purple road mechanics"
          }
        ]
      },
      {
        "range": {
          "start": 1656,
          "end": 1661
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Matar espectro y escapar (sale mal)"
          },
          {
            "lang": "en",
            "text": "Kill Specter and Escape (Goes Wrong)"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe"
          },
          {
            "lang": "en",
            "text": "Chief Mechanic"
          }
        ]
      },
      {
        "range": {
          "start": 1790,
          "end": 1795
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica añadida: Minotauro"
          },
          {
            "lang": "en",
            "text": "Added mechanic: Minotaur"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Portal verde"
          },
          {
            "lang": "en",
            "text": "Green portal"
          }
        ]
      },
      {
        "range": {
          "start": 1904,
          "end": 1909
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica añadida: Mago"
          },
          {
            "lang": "en",
            "text": "Added mechanic: Wizard"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Portal azul"
          },
          {
            "lang": "en",
            "text": "blue portal"
          }
        ]
      },
      {
        "range": {
          "start": 2030,
          "end": 2035
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Mecánica añadida: Guerrero"
          },
          {
            "lang": "en",
            "text": "Added mechanic: Warrior"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Portal rojo"
          },
          {
            "lang": "en",
            "text": "red portal"
          }
        ]
      }
    ],
    "pauses": [
      {
        "roles": [ 1, 2, 3 ],
        "start": 205,
        "duration": 5
      },
      {
        "roles": [ 1, 2, 3 ],
        "start": 356,
        "duration": 5
      }
    ],
    "timeline": [
      {
        "mode": 0,
        "ranges": [
          {
            "start": 0,
            "toEnd": true
          }
        ]
      }
    ]
  },
  {
    "id": "brp",
    "type": 3,
    "group": 4,
    "date": "2021-12-05",
    "yt": "yhbyYnTwVhU",
    "name": [
      {
        "lang": "es",
        "text": "Black Rose Prison"
      },
      {
        "lang": "en",
        "text": "Black Rose Prison"
      }
    ],
    "timeline": [
      {
        "mode": 0,
        "ranges": [
          {
            "start": 0,
            "toEnd": true
          }
        ]
      }
    ],
    "texts": [
    ],
    "pauses": []
  },
  {
    "id": "vasfelms",
    "type": 0,
    "group": 12,
    "date": "2024-06-02",
    "yt": "n_0l_wHQmoA",
    "name": [
      {
        "lang": "es",
        "text": "Asylum Sanctorium Felms"
      },
      {
        "lang": "en",
        "text": "Asylum Sanctorium Felms"
      }
    ],
    "texts": [
      {
        "range": {
          "start": 2,
          "end": 6
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Asylum Sanctorium +1 Felms (@Darth-Galix, @Korbe6791, @Maitymaity, @Nequife, @Balaitus, @Eledu y xMorgOx)"
          },
          {
            "lang": "en",
            "text": "Asylum Sanctorium +1 Felms (@Darth-Galix, @Korbe6791, @Maitymaity, @Nequife, @Balaitus, @Eledu y xMorgOx)"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Intro 1"
          },
          {
            "lang": "en",
            "text": "Intro 1"
          }
        ]
      },
      {
        "range": {
          "start": 77,
          "end": 87
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Llothis"
          },
          {
            "lang": "en",
            "text": "Lothis"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Jefe1"
          },
          {
            "lang": "en",
            "text": "Boss1"
          }
        ]
      },
      {
        "range": {
          "start": 85,
          "end": 95
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Este jefe va cambiando de posición entre 3 puntos. Durante el combate despertarán 2 robots que se desactivarán brevemente cuando se les mata y volverán a la vida continuamente."
          },
          {
            "lang": "en",
            "text": "This boss changes position between 3 points. During combat they will awaken 2 robots that will briefly deactivate when killed and will continually come back to life."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe1"
          },
          {
            "lang": "en",
            "text": "Chief Mechanic1"
          }
        ]
      },
      {
        "range": {
          "start": 90,
          "end": 100
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "El jefe se centra en un jugador y creará un área de daño en forma de cono que seguirá al objetivo. Todo el mundo debe salir de ella y el objetivo quedarse quieto bloqueando."
          },
          {
            "lang": "en",
            "text": "The boss focuses on one player and will create a cone-shaped area of ​​damage that follows the target. Everyone should get out of it and aim to stay still while blocking."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe1"
          },
          {
            "lang": "en",
            "text": "Chief Mechanic1"
          }
        ]
      },
      {
        "range": {
          "start": 143,
          "end": 153
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "El jefe carga un ataque canalizado que debe ser interrumpido, o hará daño a muchos objetivos continuamente."
          },
          {
            "lang": "en",
            "text": "The boss charges a channeled attack that must be interrupted, or it will deal damage to many targets continuously."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe1"
          },
          {
            "lang": "en",
            "text": "Chief Mechanic1"
          }
        ]
      },
      {
        "range": {
          "start": 251,
          "end": 261
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Olms"
          },
          {
            "lang": "en",
            "text": "Olms"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Jefe final"
          },
          {
            "lang": "en",
            "text": "final boss"
          }
        ]
      },
      {
        "range": {
          "start": 272,
          "end": 277
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Posicionamiento y numeración de jugadores por rol."
          },
          {
            "lang": "en",
            "text": "Positioning and numbering of players by role."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Jefe final"
          },
          {
            "lang": "en",
            "text": "final boss"
          }
        ]
      },
      {
        "range": {
          "start": 288,
          "end": 293
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "El jefe lanza un área de daño a las personas más alejadas de él, que con un buen posicionamiento caerían sobre uno de los sanadores."
          },
          {
            "lang": "en",
            "text": "The boss throws an area of ​​damage to the people furthest from him, who with good positioning would fall on one of the healers."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe final"
          },
          {
            "lang": "en",
            "text": "Mechanics Final boss"
          }
        ]
      },
      {
        "range": {
          "start": 290,
          "end": 295
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "El jefe creará un área en forma de cono de la cual hay que salir cuanto antes"
          },
          {
            "lang": "en",
            "text": "The boss will create a cone-shaped area from which you must leave as soon as possible"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe final"
          },
          {
            "lang": "en",
            "text": "Mechanics Final boss"
          }
        ]
      },
      {
        "range": {
          "start": 316,
          "end": 321
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "El jefe saltará de un lado a otro, haciendo daño en la zona donde se posa. Los jugadores deben apartarse."
          },
          {
            "lang": "en",
            "text": "The boss will jump from side to side, dealing damage in the area where it lands. Players must move away."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe final"
          },
          {
            "lang": "en",
            "text": "Mechanics Final boss"
          }
        ]
      },
      {
        "range": {
          "start": 348,
          "end": 353
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "El jefe se elevará y tirará áreas de daño que irán en dirección a cada jugador. Para evitarlas se recomienda estar en la posición numerada e ir retrocediendo hacia el exterior, como si dibujásemos una J al caminar hacia atrás, sin molestarse entre los jugadores para no tener las áreas que siguen a los de al lado."
          },
          {
            "lang": "en",
            "text": "The boss will rise and throw areas of damage that will go in the direction of each player. To avoid them, it is recommended to be in the numbered position and move backwards towards the outside, as if we were drawing a J when walking backwards, without getting between the players so as not to have the areas that follow those next to us."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe final"
          },
          {
            "lang": "en",
            "text": "Mechanics Final boss"
          }
        ]
      },
      {
        "range": {
          "start": 371,
          "end": 376
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Van apareciendo robots esféricos, que lanzarán un rayo al jefe. Mientras tenga este rayo, el jefe está invulnerable, por lo que se deben destruir cuanto antes."
          },
          {
            "lang": "en",
            "text": "Spherical robots appear, which will launch lightning at the boss. As long as it has this beam, the boss is invulnerable, so it must be destroyed as soon as possible."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe final"
          },
          {
            "lang": "en",
            "text": "Mechanics Final boss"
          }
        ]
      },
      {
        "range": {
          "start": 448,
          "end": 453
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Aparece Felms. Este jefe estará durante todo el combate, reviviendo cada vez que se le mate. Si pasa demasiado tiempo sin matarle, se pondrá rojizo y hará más daño."
          },
          {
            "lang": "en",
            "text": "Felms appears. This boss will be there throughout the fight, reviving every time he is killed. If you go too long without killing him, he will turn reddish and do more damage."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe final"
          },
          {
            "lang": "en",
            "text": "Mechanics Final boss"
          }
        ]
      },
      {
        "range": {
          "start": 464,
          "end": 469
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Felms saltará cada cierto tiempo a los jugadores más alejados de él. Con el posicionamiento inicial debería saltar de un lado a otro, dejando un área de daño donde se posa."
          },
          {
            "lang": "en",
            "text": "Felms will occasionally jump to the players furthest from him. With initial positioning it should jump from side to side, leaving an area of ​​damage where it lands."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe final"
          },
          {
            "lang": "en",
            "text": "Mechanics Final boss"
          }
        ]
      },
      {
        "range": {
          "start": 882,
          "end": 887
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "En la fase final, unas arañas robóticas crearán áreas de fuego hasta el final del combate"
          },
          {
            "lang": "en",
            "text": "In the final phase, robotic spiders will create areas of fire until the end of the fight"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe final"
          },
          {
            "lang": "en",
            "text": "Mechanics Final boss"
          }
        ]
      }
    ],
    "pauses": [
      {
        "roles": [ 1, 2, 3 ],
        "start": 90,
        "duration": 5
      },
      {
        "roles": [ 1, 2, 3 ],
        "start": 143,
        "duration": 5
      },
      {
        "roles": [ 1, 2, 3 ],
        "start": 288,
        "duration": 5
      },
      {
        "roles": [ 1, 2, 3 ],
        "start": 371,
        "duration": 5
      },
      {
        "roles": [ 1, 2, 3 ],
        "start": 448,
        "duration": 5
      },
      {
        "roles": [ 1, 2, 3 ],
        "start": 464,
        "duration": 5
      },
      {
        "roles": [ 1, 2, 3 ],
        "start": 882,
        "duration": 5
      }
    ],
    "timeline": [
      {
        "mode": 0,
        "ranges": [
          {
            "start": 0,
            "toEnd": true
          }
        ]
      }
    ]
  },


  {
    "id": "vtc",
    "type": 2,
    "group": 4,
    "date": "2024-06-03",
    "yt": "0r_5IBhZ4fs",
    "name": [
      {
        "lang": "es",
        "text": "The Cauldron"
      },
      {
        "lang": "en",
        "text": "The Cauldron"
      }
    ],
    "texts": [
      {
        "range": {
          "start": 2,
          "end": 6
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "The Cauldron (@Darth-Galix, @Korbe6791, @Maitymaity, @Nequife y xMorgOx)"
          },
          {
            "lang": "en",
            "text": "The Cauldron (@Darth-Galix, @Korbe6791, @Maitymaity, @Nequife and xMorgOx)"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Intro 1"
          },
          {
            "lang": "en",
            "text": "Intro 1"
          }
        ]
      },
      {
        "range": {
          "start": 133,
          "end": 143
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Jefe1"
          },
          {
            "lang": "en",
            "text": "Boss1"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Jefe1"
          },
          {
            "lang": "en",
            "text": "Boss1"
          }
        ]
      },
      {
        "range": {
          "start": 150,
          "end": 160
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Este jefe lanza áreas en cualquier dirección. También atrapa a un jugador y hay que liberarlo cuanto antes o morirá. Por último, invoca más enemigos."
          },
          {
            "lang": "en",
            "text": "This boss launches areas in any direction. It also traps a player and must be freed as soon as possible or they will die. Lastly, summon more enemies."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe1"
          },
          {
            "lang": "en",
            "text": "Chief Mechanic1"
          }
        ]
      },
      {
        "range": {
          "start": 254,
          "end": 264
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Jefe2"
          },
          {
            "lang": "en",
            "text": "Boss2"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Jefe2"
          },
          {
            "lang": "en",
            "text": "Boss2"
          }
        ]
      },
      {
        "range": {
          "start": 281,
          "end": 291
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "El jefe lanzará áreas y una de ella será muy grande. Además invocará enemigos. A un jugador le lanzará un rayo y habrá que interrumpirlo rápidamente o el jugador morirá."
          },
          {
            "lang": "en",
            "text": "The boss will launch areas and one of them will be very big. It will also summon enemies. A player will be hit with lightning and must be interrupted quickly or the player will die."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe2"
          },
          {
            "lang": "en",
            "text": "Chief Mechanic2"
          }
        ]
      },
      {
        "range": {
          "start": 424,
          "end": 434
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Jefe3"
          },
          {
            "lang": "en",
            "text": "Boss3"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Jefe3"
          },
          {
            "lang": "en",
            "text": "Boss3"
          }
        ]
      },
      {
        "range": {
          "start": 440,
          "end": 450
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Este jefe se irá moviendo de lado a lado mientras invoca más enemigos. Cuando mete el puño en el suelo hay que interrumpirlo para que deje de hacer daño. También hace una explosión de gran área."
          },
          {
            "lang": "en",
            "text": "This boss will move from side to side while summoning more enemies. When he puts his fist into the ground you have to stop him so he stops doing damage. It also makes a large area explosion."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe3"
          },
          {
            "lang": "en",
            "text": "Chief Mechanic3"
          }
        ]
      },
      {
        "range": {
          "start": 560,
          "end": 570
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Jefe4"
          },
          {
            "lang": "en",
            "text": "Boss4"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Jefe4"
          },
          {
            "lang": "en",
            "text": "Boss4"
          }
        ]
      },
      {
        "range": {
          "start": 575,
          "end": 585
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "En esta sala hay que destruir las esferas externas. Para ello, cogeremos del suelo una bola de aceite que lanza el boss y uniremos la esfera del centro con las exteriores, haciendo que cuando explore la esfera central, el fuego queme el aceite y llegue a las esferas externas y las destruya. Tras romper cada esfera, sale una oleada de enemigos."
          },
          {
            "lang": "en",
            "text": "In this room you have to destroy the external spheres. To do this, we will pick up a ball of oil from the ground that the boss throws and we will join the center sphere with the outer ones, making sure that when it explores the central sphere, the fire burns the oil and reaches the outer spheres and destroys them. After breaking each sphere, a wave of enemies comes out."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe4"
          },
          {
            "lang": "en",
            "text": "Chief Mechanic4"
          }
        ]
      },
      {
        "range": {
          "start": 845,
          "end": 855
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Jefe final"
          },
          {
            "lang": "en",
            "text": "final boss"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Jefe final"
          },
          {
            "lang": "en",
            "text": "final boss"
          }
        ]
      },
      {
        "range": {
          "start": 851,
          "end": 861
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Del centro de la sala saldrán unos rayos que nos matarán al momento. Estos rayos se irán moviendo y tendremos que movernos junto a ellos, como se ve en el video. Además irán apareciendo columnas de piedra que se romperán con un ataque si cogemos la sinergia que hay por la sala. Irán apareciendo enemigos."
          },
          {
            "lang": "en",
            "text": "Rays will come from the center of the room that will kill us instantly. These rays will move and we will have to move with them, as seen in the video. In addition, stone columns will appear that will break with an attack if we take the synergy that is in the room. Enemies will appear."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe final"
          },
          {
            "lang": "en",
            "text": "Mechanics Final boss"
          }
        ]
      },
      {
        "id": "vasfelms",
        "type": 0,
        "group": 12,
        "date": "2024-06-02",
        "yt": "n_0l_wHQmoA",
        "name": [
          {
            "lang": "es",
            "text": "Asylum Sanctorium Felms"
          },
          {
            "lang": "en",
            "text": "Asylum Sanctorium Felms"
          }
        ],
        "texts": [
          {
            "range": {
              "start": 2,
              "end": 6
            },
            "roles": [ 0 ],
            "text": [
              {
                "lang": "es",
                "text": "Asylum Sanctorium +1 Felms (@Darth-Galix, @Korbe6791, @Maitymaity, @Nequife, @Balaitus, @Eledu y xMorgOx)"
              },
              {
                "lang": "en",
                "text": "Asylum Sanctorium +1 Felms (@Darth-Galix, @Korbe6791, @Maitymaity, @Nequife, @Balaitus, @Eledu y xMorgOx)"
              }
            ],
            "title": [
              {
                "lang": "es",
                "text": "Intro 1"
              },
              {
                "lang": "en",
                "text": "Intro 1"
              }
            ]
          },
          {
            "range": {
              "start": 77,
              "end": 87
            },
            "roles": [ 0 ],
            "text": [
              {
                "lang": "es",
                "text": "Llothis"
              },
              {
                "lang": "en",
                "text": "Lothis"
              }
            ],
            "title": [
              {
                "lang": "es",
                "text": "Jefe1"
              },
              {
                "lang": "en",
                "text": "Boss1"
              }
            ]
          },
          {
            "range": {
              "start": 85,
              "end": 95
            },
            "roles": [ 0 ],
            "text": [
              {
                "lang": "es",
                "text": "Este jefe va cambiando de posición entre 3 puntos. Durante el combate despertarán 2 robots que se desactivarán brevemente cuando se les mata y volverán a la vida continuamente."
              },
              {
                "lang": "en",
                "text": "This boss changes position between 3 points. During combat they will awaken 2 robots that will briefly deactivate when killed and will continually come back to life."
              }
            ],
            "title": [
              {
                "lang": "es",
                "text": "Mecánica Jefe1"
              },
              {
                "lang": "en",
                "text": "Chief Mechanic1"
              }
            ]
          },
          {
            "range": {
              "start": 90,
              "end": 100
            },
            "roles": [ 0 ],
            "text": [
              {
                "lang": "es",
                "text": "El jefe se centra en un jugador y creará un área de daño en forma de cono que seguirá al objetivo. Todo el mundo debe salir de ella y el objetivo quedarse quieto bloqueando."
              },
              {
                "lang": "en",
                "text": "The boss focuses on one player and will create a cone-shaped area of ​​damage that follows the target. Everyone should get out of it and aim to stay still while blocking."
              }
            ],
            "title": [
              {
                "lang": "es",
                "text": "Mecánica Jefe1"
              },
              {
                "lang": "en",
                "text": "Chief Mechanic1"
              }
            ]
          },
          {
            "range": {
              "start": 143,
              "end": 153
            },
            "roles": [ 0 ],
            "text": [
              {
                "lang": "es",
                "text": "El jefe carga un ataque canalizado que debe ser interrumpido, o hará daño a muchos objetivos continuamente."
              },
              {
                "lang": "en",
                "text": "The boss charges a channeled attack that must be interrupted, or it will deal damage to many targets continuously."
              }
            ],
            "title": [
              {
                "lang": "es",
                "text": "Mecánica Jefe1"
              },
              {
                "lang": "en",
                "text": "Chief Mechanic1"
              }
            ]
          },
          {
            "range": {
              "start": 251,
              "end": 261
            },
            "roles": [ 0 ],
            "text": [
              {
                "lang": "es",
                "text": "Olms"
              },
              {
                "lang": "en",
                "text": "Olms"
              }
            ],
            "title": [
              {
                "lang": "es",
                "text": "Jefe final"
              },
              {
                "lang": "en",
                "text": "final boss"
              }
            ]
          },
          {
            "range": {
              "start": 272,
              "end": 277
            },
            "roles": [ 0 ],
            "text": [
              {
                "lang": "es",
                "text": "Posicionamiento y numeración de jugadores por rol."
              },
              {
                "lang": "en",
                "text": "Positioning and numbering of players by role."
              }
            ],
            "title": [
              {
                "lang": "es",
                "text": "Jefe final"
              },
              {
                "lang": "en",
                "text": "final boss"
              }
            ]
          },
          {
            "range": {
              "start": 288,
              "end": 293
            },
            "roles": [ 0 ],
            "text": [
              {
                "lang": "es",
                "text": "El jefe lanza un área de daño a las personas más alejadas de él, que con un buen posicionamiento caerían sobre uno de los sanadores."
              },
              {
                "lang": "en",
                "text": "The boss throws an area of ​​damage to the people furthest from him, who with good positioning would fall on one of the healers."
              }
            ],
            "title": [
              {
                "lang": "es",
                "text": "Mecánica Jefe final"
              },
              {
                "lang": "en",
                "text": "Mechanics Final boss"
              }
            ]
          },
          {
            "range": {
              "start": 290,
              "end": 295
            },
            "roles": [ 0 ],
            "text": [
              {
                "lang": "es",
                "text": "El jefe creará un área en forma de cono de la cual hay que salir cuanto antes"
              },
              {
                "lang": "en",
                "text": "The boss will create a cone-shaped area from which you must leave as soon as possible"
              }
            ],
            "title": [
              {
                "lang": "es",
                "text": "Mecánica Jefe final"
              },
              {
                "lang": "en",
                "text": "Mechanics Final boss"
              }
            ]
          },
          {
            "range": {
              "start": 316,
              "end": 321
            },
            "roles": [ 0 ],
            "text": [
              {
                "lang": "es",
                "text": "El jefe saltará de un lado a otro, haciendo daño en la zona donde se posa. Los jugadores deben apartarse."
              },
              {
                "lang": "en",
                "text": "The boss will jump from side to side, dealing damage in the area where it lands. Players must move away."
              }
            ],
            "title": [
              {
                "lang": "es",
                "text": "Mecánica Jefe final"
              },
              {
                "lang": "en",
                "text": "Mechanics Final boss"
              }
            ]
          },
          {
            "range": {
              "start": 348,
              "end": 353
            },
            "roles": [ 0 ],
            "text": [
              {
                "lang": "es",
                "text": "El jefe se elevará y tirará áreas de daño que irán en dirección a cada jugador. Para evitarlas se recomienda estar en la posición numerada e ir retrocediendo hacia el exterior, como si dibujásemos una J al caminar hacia atrás, sin molestarse entre los jugadores para no tener las áreas que siguen a los de al lado."
              },
              {
                "lang": "en",
                "text": "The boss will rise and throw areas of damage that will go in the direction of each player. To avoid them, it is recommended to be in the numbered position and move backwards towards the outside, as if we were drawing a J when walking backwards, without getting between the players so as not to have the areas that follow those next to us."
              }
            ],
            "title": [
              {
                "lang": "es",
                "text": "Mecánica Jefe final"
              },
              {
                "lang": "en",
                "text": "Mechanics Final boss"
              }
            ]
          },
          {
            "range": {
              "start": 371,
              "end": 376
            },
            "roles": [ 0 ],
            "text": [
              {
                "lang": "es",
                "text": "Van apareciendo robots esféricos, que lanzarán un rayo al jefe. Mientras tenga este rayo, el jefe está invulnerable, por lo que se deben destruir cuanto antes."
              },
              {
                "lang": "en",
                "text": "Spherical robots appear, which will launch lightning at the boss. As long as it has this beam, the boss is invulnerable, so it must be destroyed as soon as possible."
              }
            ],
            "title": [
              {
                "lang": "es",
                "text": "Mecánica Jefe final"
              },
              {
                "lang": "en",
                "text": "Mechanics Final boss"
              }
            ]
          },
          {
            "range": {
              "start": 448,
              "end": 453
            },
            "roles": [ 0 ],
            "text": [
              {
                "lang": "es",
                "text": "Aparece Felms. Este jefe estará durante todo el combate, reviviendo cada vez que se le mate. Si pasa demasiado tiempo sin matarle, se pondrá rojizo y hará más daño."
              },
              {
                "lang": "en",
                "text": "Felms appears. This boss will be there throughout the fight, reviving every time he is killed. If you go too long without killing him, he will turn reddish and do more damage."
              }
            ],
            "title": [
              {
                "lang": "es",
                "text": "Mecánica Jefe final"
              },
              {
                "lang": "en",
                "text": "Mechanics Final boss"
              }
            ]
          },
          {
            "range": {
              "start": 464,
              "end": 469
            },
            "roles": [ 0 ],
            "text": [
              {
                "lang": "es",
                "text": "Felms saltará cada cierto tiempo a los jugadores más alejados de él. Con el posicionamiento inicial debería saltar de un lado a otro, dejando un área de daño donde se posa."
              },
              {
                "lang": "en",
                "text": "Felms will occasionally jump to the players furthest from him. With initial positioning it should jump from side to side, leaving an area of ​​damage where it lands."
              }
            ],
            "title": [
              {
                "lang": "es",
                "text": "Mecánica Jefe final"
              },
              {
                "lang": "en",
                "text": "Mechanics Final boss"
              }
            ]
          },
          {
            "range": {
              "start": 882,
              "end": 887
            },
            "roles": [ 0 ],
            "text": [
              {
                "lang": "es",
                "text": "En la fase final, unas arañas robóticas crearán áreas de fuego hasta el final del combate"
              },
              {
                "lang": "en",
                "text": "In the final phase, robotic spiders will create areas of fire until the end of the fight"
              }
            ],
            "title": [
              {
                "lang": "es",
                "text": "Mecánica Jefe final"
              },
              {
                "lang": "en",
                "text": "Mechanics Final boss"
              }
            ]
          }
        ],
        "pauses": [
          {
            "roles": [ 1, 2, 3 ],
            "start": 90,
            "duration": 5
          },
          {
            "roles": [ 1, 2, 3 ],
            "start": 143,
            "duration": 5
          },
          {
            "roles": [ 1, 2, 3 ],
            "start": 288,
            "duration": 5
          },
          {
            "roles": [ 1, 2, 3 ],
            "start": 371,
            "duration": 5
          },
          {
            "roles": [ 1, 2, 3 ],
            "start": 448,
            "duration": 5
          },
          {
            "roles": [ 1, 2, 3 ],
            "start": 464,
            "duration": 5
          },
          {
            "roles": [ 1, 2, 3 ],
            "start": 882,
            "duration": 5
          }
        ],
        "timeline": [
          {
            "mode": 0,
            "ranges": [
              {
                "start": 0,
                "toEnd": true
              }
            ]
          }
        ]
      },
      {
        "range": {
          "start": 2,
          "end": 6
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Asylum Sanctorium +1 Felms (@Darth-Galix, @Korbe6791, @Maitymaity, @Nequife, @Balaitus, @Eledu y xMorgOx)"
          },
          {
            "lang": "en",
            "text": "Asylum Sanctorium +1 Felms (@Darth-Galix, @Korbe6791, @Maitymaity, @Nequife, @Balaitus, @Eledu y xMorgOx)"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Intro 1"
          },
          {
            "lang": "en",
            "text": "Intro 1"
          }
        ]
      },
      {
        "range": {
          "start": 77,
          "end": 87
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Llothis"
          },
          {
            "lang": "en",
            "text": "Lothis"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Jefe1"
          },
          {
            "lang": "en",
            "text": "Boss1"
          }
        ]
      },
      {
        "range": {
          "start": 85,
          "end": 95
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Este jefe va cambiando de posición entre 3 puntos. Durante el combate despertarán 2 robots que se desactivarán brevemente cuando se les mata y volverán a la vida continuamente."
          },
          {
            "lang": "en",
            "text": "This boss changes position between 3 points. During combat they will awaken 2 robots that will briefly deactivate when killed and will continually come back to life."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe1"
          },
          {
            "lang": "en",
            "text": "Chief Mechanic1"
          }
        ]
      },
      {
        "range": {
          "start": 90,
          "end": 100
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "El jefe se centra en un jugador y creará un área de daño en forma de cono que seguirá al objetivo. Todo el mundo debe salir de ella y el objetivo quedarse quieto bloqueando."
          },
          {
            "lang": "en",
            "text": "The boss focuses on one player and will create a cone-shaped area of ​​damage that follows the target. Everyone should get out of it and aim to stay still while blocking."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe1"
          },
          {
            "lang": "en",
            "text": "Chief Mechanic1"
          }
        ]
      },
      {
        "range": {
          "start": 143,
          "end": 153
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "El jefe carga un ataque canalizado que debe ser interrumpido, o hará daño a muchos objetivos continuamente."
          },
          {
            "lang": "en",
            "text": "The boss charges a channeled attack that must be interrupted, or it will deal damage to many targets continuously."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe1"
          },
          {
            "lang": "en",
            "text": "Chief Mechanic1"
          }
        ]
      },
      {
        "range": {
          "start": 251,
          "end": 261
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Olms"
          },
          {
            "lang": "en",
            "text": "Olms"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Jefe final"
          },
          {
            "lang": "en",
            "text": "final boss"
          }
        ]
      },
      {
        "range": {
          "start": 272,
          "end": 277
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Posicionamiento y numeración de jugadores por rol."
          },
          {
            "lang": "en",
            "text": "Positioning and numbering of players by role."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Jefe final"
          },
          {
            "lang": "en",
            "text": "final boss"
          }
        ]
      },
      {
        "range": {
          "start": 288,
          "end": 293
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "El jefe lanza un área de daño a las personas más alejadas de él, que con un buen posicionamiento caerían sobre uno de los sanadores."
          },
          {
            "lang": "en",
            "text": "The boss throws an area of ​​damage to the people furthest from him, who with good positioning would fall on one of the healers."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe final"
          },
          {
            "lang": "en",
            "text": "Mechanics Final boss"
          }
        ]
      },
      {
        "range": {
          "start": 290,
          "end": 295
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "El jefe creará un área en forma de cono de la cual hay que salir cuanto antes"
          },
          {
            "lang": "en",
            "text": "The boss will create a cone-shaped area from which you must leave as soon as possible"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe final"
          },
          {
            "lang": "en",
            "text": "Mechanics Final boss"
          }
        ]
      },
      {
        "range": {
          "start": 316,
          "end": 321
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "El jefe saltará de un lado a otro, haciendo daño en la zona donde se posa. Los jugadores deben apartarse."
          },
          {
            "lang": "en",
            "text": "The boss will jump from side to side, dealing damage in the area where it lands. Players must move away."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe final"
          },
          {
            "lang": "en",
            "text": "Mechanics Final boss"
          }
        ]
      },
      {
        "range": {
          "start": 348,
          "end": 353
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "El jefe se elevará y tirará áreas de daño que irán en dirección a cada jugador. Para evitarlas se recomienda estar en la posición numerada e ir retrocediendo hacia el exterior, como si dibujásemos una J al caminar hacia atrás, sin molestarse entre los jugadores para no tener las áreas que siguen a los de al lado."
          },
          {
            "lang": "en",
            "text": "The boss will rise and throw areas of damage that will go in the direction of each player. To avoid them, it is recommended to be in the numbered position and move backwards towards the outside, as if we were drawing a J when walking backwards, without getting between the players so as not to have the areas that follow those next to us."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe final"
          },
          {
            "lang": "en",
            "text": "Mechanics Final boss"
          }
        ]
      },
      {
        "range": {
          "start": 371,
          "end": 376
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Van apareciendo robots esféricos, que lanzarán un rayo al jefe. Mientras tenga este rayo, el jefe está invulnerable, por lo que se deben destruir cuanto antes."
          },
          {
            "lang": "en",
            "text": "Spherical robots appear, which will launch lightning at the boss. As long as it has this beam, the boss is invulnerable, so it must be destroyed as soon as possible."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe final"
          },
          {
            "lang": "en",
            "text": "Mechanics Final boss"
          }
        ]
      },
      {
        "range": {
          "start": 448,
          "end": 453
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Aparece Felms. Este jefe estará durante todo el combate, reviviendo cada vez que se le mate. Si pasa demasiado tiempo sin matarle, se pondrá rojizo y hará más daño."
          },
          {
            "lang": "en",
            "text": "Felms appears. This boss will be there throughout the fight, reviving every time he is killed. If you go too long without killing him, he will turn reddish and do more damage."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe final"
          },
          {
            "lang": "en",
            "text": "Mechanics Final boss"
          }
        ]
      },
      {
        "range": {
          "start": 464,
          "end": 469
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "Felms saltará cada cierto tiempo a los jugadores más alejados de él. Con el posicionamiento inicial debería saltar de un lado a otro, dejando un área de daño donde se posa."
          },
          {
            "lang": "en",
            "text": "Felms will occasionally jump to the players furthest from him. With initial positioning it should jump from side to side, leaving an area of ​​damage where it lands."
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe final"
          },
          {
            "lang": "en",
            "text": "Mechanics Final boss"
          }
        ]
      },
      {
        "range": {
          "start": 882,
          "end": 887
        },
        "roles": [ 0 ],
        "text": [
          {
            "lang": "es",
            "text": "En la fase final, unas arañas robóticas crearán áreas de fuego hasta el final del combate"
          },
          {
            "lang": "en",
            "text": "In the final phase, robotic spiders will create areas of fire until the end of the fight"
          }
        ],
        "title": [
          {
            "lang": "es",
            "text": "Mecánica Jefe final"
          },
          {
            "lang": "en",
            "text": "Mechanics Final boss"
          }
        ]
      }
    ],
    "pauses": [
      {
        "roles": [ 1, 2 ],
        "start": 117,
        "duration": 5
      }
    ],
    "timeline": [
      {
        "mode": 0,
        "ranges": [
          {
            "start": 0,
            "end": 991
          }
        ]
      },
      {
        "mode": 1,
        "ranges": [
          {
            "start": 0,
            "end": 875
          },
          {
            "start": 992,
            "toEnd": true
          }
        ]
      }
    ]
  }

]

